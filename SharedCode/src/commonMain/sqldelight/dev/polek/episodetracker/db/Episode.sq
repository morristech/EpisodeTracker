CREATE TABLE Episode(
    showTmdbId INTEGER As Int NOT NULL,
    seasonNumber INTEGER AS Int NOT NULL,
    episodeNumber INTEGER AS Int NOT NULL,
    name TEXT NOT NULL,
    airDateMillis INTEGER,
    imageUrl TEXT,
    isWatched INTEGER AS Boolean NOT NULL DEFAULT 0,

    PRIMARY KEY(showTmdbId, seasonNumber, episodeNumber)
);

CREATE VIEW NotWatchedEpisodes AS
SELECT showTmdbId, count(*) AS count, min(10000 * seasonNumber + episodeNumber) AS firstNotWatchedEpisodeIndex
FROM Episode
JOIN Time
WHERE isWatched = 0 AND airDateMillis < Time.currentTimeMillis
GROUP BY showTmdbId;

insert:
INSERT OR REPLACE INTO Episode(showTmdbId, episodeNumber, seasonNumber, name, airDateMillis, imageUrl)
VALUES (?, ?, ?, ?, ?, ?);

deleteByTmdbId:
DELETE FROM Episode WHERE showTmdbId = ?;

lastInsertRowId:
SELECT last_insert_rowid();

episode:
SELECT *
FROM Episode
WHERE showTmdbId = ? AND seasonNumber = ? AND episodeNumber = ?;

setEpisodeWatched:
UPDATE Episode
SET isWatched = ?
WHERE showTmdbId = ? AND seasonNumber = ? AND episodeNumber = ?;

markAllWatched:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ?
  AND airDateMillis < (SELECT currentTimeMillis FROM Time);

markAllWatchedUpTo:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ? AND (seasonNumber < :season OR (seasonNumber == :season AND episodeNumber <= :episode));

markAllWatchedUpToSeason:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ?
  AND seasonNumber <= :season
  AND airDateMillis < (SELECT currentTimeMillis FROM Time);

nextNotWatchedEpisode:
SELECT seasonNumber, episodeNumber
FROM Episode
WHERE showTmdbId = ? AND isWatched = 0
ORDER BY seasonNumber, episodeNumber
LIMIT 1;

setSeasonWatched:
UPDATE Episode
SET isWatched = ?
WHERE showTmdbId = ? AND seasonNumber = ?;

allEpisodes:
SELECT name, seasonNumber, episodeNumber, isWatched, airDateMillis, imageUrl
FROM Episode;

episodes:
SELECT name, seasonNumber, episodeNumber, isWatched, airDateMillis, imageUrl
FROM Episode
WHERE showTmdbId = ?;
