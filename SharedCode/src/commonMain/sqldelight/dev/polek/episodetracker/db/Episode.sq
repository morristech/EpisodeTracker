CREATE TABLE Episode(
    showTmdbId INTEGER As Int NOT NULL,
    seasonNumber INTEGER AS Int NOT NULL,
    episodeNumber INTEGER AS Int NOT NULL,
    name TEXT NOT NULL,
    airDateMillis INTEGER,
    imageUrl TEXT,
    isWatched INTEGER AS Boolean NOT NULL DEFAULT 0,

    PRIMARY KEY(showTmdbId, seasonNumber, episodeNumber)
);

CREATE VIEW NotWatchedEpisodes AS
SELECT showTmdbId, count(*) AS count, min(10000 * seasonNumber + episodeNumber) AS firstNotWatchedEpisodeIndex
FROM Episode
JOIN Time
WHERE isWatched = 0 AND seasonNumber > 0 AND airDateMillis < Time.currentTimeMillis
GROUP BY showTmdbId;

CREATE VIEW NotWatchedSpecials AS
SELECT showTmdbId, count(*) AS count, min(episodeNumber) AS firstNotWatchedEpisode
FROM Episode
WHERE isWatched = 0 AND seasonNumber = 0
GROUP BY showTmdbId;

CREATE VIEW UpcomingEpisodes AS
SELECT showTmdbId, min(10000 * seasonNumber + episodeNumber) AS upcomingEpisodeIndex
FROM Episode
JOIN Time
WHERE airDateMillis > Time.currentTimeMillis
GROUP BY showTmdbId;

CREATE VIEW LastWeekNotWatchedEpisodes AS
SELECT showTmdbId, max(10000 * seasonNumber + episodeNumber) AS episodeIndex
FROM Episode
JOIN Time
WHERE isWatched = 0 AND airDateMillis < currentTimeMillis AND airDateMillis > (currentTimeMillis - 7 * 24 * 60 * 60 * 1000)
GROUP BY showTmdbId;

insert:
INSERT OR REPLACE INTO Episode(showTmdbId, episodeNumber, seasonNumber, name, airDateMillis, imageUrl)
VALUES (?, ?, ?, ?, ?, ?);

update:
UPDATE Episode
SET name = ?, airDateMillis = ?, imageUrl = ?
WHERE showTmdbId = ? AND seasonNumber = ? AND episodeNumber = ?;

deleteByTmdbId:
DELETE FROM Episode WHERE showTmdbId = ?;

lastInsertRowId:
SELECT last_insert_rowid();

isEpisodeInDb:
SELECT count(*) > 0
FROM Episode
WHERE showTmdbId = ? AND seasonNumber = ? AND episodeNumber = ?;

episode:
SELECT *
FROM Episode
WHERE showTmdbId = ? AND seasonNumber = ? AND episodeNumber = ?;

setEpisodeWatched:
UPDATE Episode
SET isWatched = ?
WHERE showTmdbId = ? AND seasonNumber = ? AND episodeNumber = ?;

markAllWatched:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ?
  AND seasonNumber > 0
  AND airDateMillis < (SELECT currentTimeMillis FROM Time);

markAllSpecialsWatched:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ?
  AND seasonNumber = 0;

markAllWatchedUpTo:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ?
  AND seasonNumber > 0
  AND (seasonNumber < :season OR (seasonNumber == :season AND episodeNumber <= :episode));

markAllWatchedUpToSeason:
UPDATE Episode
SET isWatched = 1
WHERE showTmdbId = ?
  AND seasonNumber > 0
  AND seasonNumber <= :season
  AND airDateMillis < (SELECT currentTimeMillis FROM Time);

nextNotWatchedEpisode:
SELECT seasonNumber, episodeNumber
FROM Episode
WHERE showTmdbId = ? AND isWatched = 0 AND seasonNumber > 0
ORDER BY seasonNumber, episodeNumber
LIMIT 1;

nextNotWatchedSpecialEpisode:
SELECT seasonNumber, episodeNumber
FROM Episode
WHERE showTmdbId = ? AND isWatched = 0 AND seasonNumber = 0
ORDER BY episodeNumber
LIMIT 1;

setSeasonWatched:
UPDATE Episode
SET isWatched = ?
WHERE showTmdbId = ? AND seasonNumber = ?;

allEpisodes:
SELECT name, seasonNumber, episodeNumber, isWatched, airDateMillis, imageUrl
FROM Episode;

episodes:
SELECT name, seasonNumber, episodeNumber, isWatched, airDateMillis, imageUrl
FROM Episode
WHERE showTmdbId = ?;

lastSeason:
SELECT max(seasonNumber)
FROM Episode
WHERE showTmdbId = ?;
