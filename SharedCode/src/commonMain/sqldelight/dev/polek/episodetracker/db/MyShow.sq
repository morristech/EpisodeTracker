import kotlin.collections.List;

CREATE TABLE MyShow (
    tmdbId INTEGER AS Int NOT NULL,
    imdbId TEXT,
    tvdbId INTEGER AS Int,
    facebookId TEXT,
    instagramId TEXT,
    twitterId TEXT,
    name TEXT NOT NULL,
    overview TEXT NOT NULL,
    year INTEGER as Int,
    lastYear INTEGER as Int,
    imageUrl TEXT,
    homePageUrl TEXT,
    genres TEXT AS List<String> NOT NULL,
    networks TEXT AS List<String> NOT NULL,
    contentRating TEXT,
    isEnded INTEGER AS Boolean NOT NULL,
    nextEpisodeSeason INTEGER AS Int,
    nextEpisodeNumber INTEGER AS Int,

    PRIMARY KEY (tmdbId)
);

insert:
INSERT INTO MyShow(imdbId, tmdbId, tvdbId, facebookId, instagramId, twitterId, name, overview, year, lastYear, imageUrl, homePageUrl, genres, networks, contentRating, isEnded, nextEpisodeSeason, nextEpisodeNumber)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

deleteByTmdbId:
DELETE FROM MyShow WHERE tmdbId = ?;

isInMyShows:
SELECT count(*) > 0
FROM MyShow
WHERE tmdbId = ?;

upcomingShows:
SELECT tmdbId, MyShow.name, Episode.name, episodeNumber, seasonNumber, Episode.airDateMillis, Episode.imageUrl
FROM MyShow
INNER JOIN Episode
 ON Episode.showTmdbId = MyShow.tmdbId
 AND Episode.seasonNumber = MyShow.nextEpisodeSeason
 AND Episode.episodeNumber = MyShow.nextEpisodeNumber;

toBeAnnouncedShows:
SELECT tmdbId, name, imageUrl
FROM MyShow
WHERE isEnded = 0 AND nextEpisodeNumber IS NULL;

endedShows:
SELECT tmdbId, name, imageUrl
FROM MyShow
WHERE isEnded = 1;

toWatchShows:
SELECT MyShow.tmdbId, MyShow.name, Episode.seasonNumber, Episode.episodeNumber, Episode.name, Episode.imageUrl, NotWatchedEpisodes.count
FROM MyShow
INNER JOIN NotWatchedEpisodes ON NotWatchedEpisodes.showTmdbId = MyShow.tmdbId
INNER JOIN Episode ON Episode.showTmdbId = NotWatchedEpisodes.showTmdbId AND (10000 * Episode.seasonNumber + Episode.episodeNumber) = NotWatchedEpisodes.firstNotWatchedEpisodeIndex;

toWatchShow:
SELECT MyShow.tmdbId, MyShow.name, Episode.seasonNumber, Episode.episodeNumber, Episode.name, Episode.imageUrl, NotWatchedEpisodes.count
FROM MyShow
INNER JOIN NotWatchedEpisodes ON NotWatchedEpisodes.showTmdbId = MyShow.tmdbId
INNER JOIN Episode ON Episode.showTmdbId = NotWatchedEpisodes.showTmdbId AND (10000 * Episode.seasonNumber + Episode.episodeNumber) = NotWatchedEpisodes.firstNotWatchedEpisodeIndex
WHERE MyShow.tmdbId = ?;

showDetails:
SELECT
 MyShow.name,
 MyShow.imageUrl,
 year,
 lastYear,
 isEnded,
 contentRating,
 overview,
 genres,
 networks,
 homePageUrl,
 imdbId,
 facebookId,
 instagramId,
 twitterId
FROM MyShow
WHERE MyShow.tmdbId = ?;
