apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply plugin: 'com.android.library'

android {
    compileSdkVersion compile_sdk_version

    defaultConfig {
        minSdkVersion min_sdk_version
        versionCode version_code
        versionName version_name
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('SharedCode')
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }

        commonMain {
            kotlin.srcDirs += "build/generated/source/properties/"
        }

        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"

            // Ktor Client
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-logging:$ktor_version"
            implementation "io.ktor:ktor-client-auth:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "io.ktor:ktor-client-serialization:$ktor_version"

            // Serialization
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

            // Stately
            implementation "co.touchlab:stately-common:$stately_version"
            implementation "co.touchlab:stately-collections:$stately_version"
            implementation "co.touchlab:stately-concurrency:$stately_version"
        }
        commonTest.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-test-common'
            implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            implementation "io.ktor:ktor-client-mock:$ktor_version"
            implementation "com.willowtreeapps.assertk:assertk:$assertk_version"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'

            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

            // Ktor Client
            implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-auth-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"

            // Serialization
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

            // SQLDelight
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
        }

        androidTest.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-test'
            implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            implementation "com.squareup.sqldelight:sqlite-driver:$sqldelight_version"
            implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
        }

        iosMain.dependencies {
            // Coroutines
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"

            // Ktor Client
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "io.ktor:ktor-client-logging-native:$ktor_version"
            implementation "io.ktor:ktor-client-auth-native:$ktor_version"
            implementation "io.ktor:ktor-client-json-native:$ktor_version"
            implementation "io.ktor:ktor-client-serialization-native:$ktor_version"

            // Serialization
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

            // SQLDelight
            implementation "com.squareup.sqldelight:native-driver:$sqldelight_version"
        }
    }
}

sqldelight {
    Database {
        packageName = "dev.polek.episodetracker.db"
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

task loadApiKeys(type: Sync) {
    final propsFile = file("api_keys.properties")
    if (propsFile.exists()) {
        final props = new Properties()
        props.load(new FileInputStream(propsFile))


        final outFile = file("build/generated/source/properties/ApiKeys.kt")
        if (outFile.exists()) {
            outFile.delete()
        }
        final srcDir = file(outFile.parent)
        if (!srcDir.exists()) {
            srcDir.mkdirs()
        }
        outFile.createNewFile()
        final writer = outFile.newPrintWriter()
        writer.println("package dev.polek.episodetracker")
        writer.println()

        for (String propertyName : props.stringPropertyNames()) {
            writer.println("const val ${propertyName} = \"${props[propertyName]}\"")
        }
        writer.close()
    } else {
        throw new GradleException("'" + propsFile.name + "' file does not exist")
    }
}
tasks.build.dependsOn loadApiKeys
